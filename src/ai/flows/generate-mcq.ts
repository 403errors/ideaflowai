// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow to generate adaptive multiple-choice questions (MCQs) based on user input and context.
 *
 * - generateAdaptiveMCQ - A function that generates MCQs.
 * - GenerateAdaptiveMCQInput - The input type for the generateAdaptiveMCQ function.
 * - GenerateAdaptiveMCQOutput - The return type for the generateAdaptiveMCQ function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateAdaptiveMCQInputSchema = z.object({
  ideaSummary: z.string().describe('The summarized idea extracted from the user input.'),
  category: z
    .enum(['UI/UX', 'Features', 'Flow & Extras'])
    .describe('The category of questions to generate.'),
  previousAnswers: z
    .record(z.string(), z.string())
    .optional()
    .describe('The previous answers provided by the user, mapping question to answer.'),
});

export type GenerateAdaptiveMCQInput = z.infer<typeof GenerateAdaptiveMCQInputSchema>;

const GenerateAdaptiveMCQOutputSchema = z.object({
  questions: z.array(
    z.object({
      question: z.string().describe('The multiple-choice question.'),
      options: z.array(z.string()).describe('The options for the question.'),
      recommendedOption: z.string().describe('The AI recommended option for this question'),
    })
  ).describe('The generated multiple-choice questions.'),
});

export type GenerateAdaptiveMCQOutput = z.infer<typeof GenerateAdaptiveMCQOutputSchema>;

export async function generateAdaptiveMCQ(input: GenerateAdaptiveMCQInput): Promise<GenerateAdaptiveMCQOutput> {
  return generateAdaptiveMCQFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateAdaptiveMCQPrompt',
  input: {schema: GenerateAdaptiveMCQInputSchema},
  output: {schema: GenerateAdaptiveMCQOutputSchema},
  prompt: `You are an AI assistant designed to generate non-technical multiple-choice questions for app development.

  Based on the user's initial idea and previous answers, create questions to refine the app concept.

  Idea Summary: {{{ideaSummary}}}
  Category: {{{category}}}

  Previous Answers:
  {{#if previousAnswers}}
    {{#each previousAnswers}}
- "{{@key}}": "{{this}}"
    {{/each}}
  {{else}}
  None
  {{/if}}

  Exclude any topics already covered in the idea summary or previous answers.

  Format the output as a JSON object with a "questions" array. Each question object should include:
  - "question": The multiple-choice question.
  - "options": An array of possible answers (at least 3).
  - "recommendedOption": The option the AI recommends. Make sure this recommended option is one of the provided options.

  Ensure the questions are non-technical and easy for a non-developer to understand.
  `,
});

const generateAdaptiveMCQFlow = ai.defineFlow(
  {
    name: 'generateAdaptiveMCQFlow',
    inputSchema: GenerateAdaptiveMCQInputSchema,
    outputSchema: GenerateAdaptiveMCQOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    
    if (!output || !output.questions) {
      return { questions: [] };
    }

    const validatedQuestions = output.questions.map(q => {
      // Ensure the recommended option is actually in the options list.
      // If not, default to the first option.
      if (q.options && !q.options.includes(q.recommendedOption)) {
        return { ...q, recommendedOption: q.options[0] || "" };
      }
      return q;
    }).filter(q => q.question && q.options && q.options.length > 0);


    return { questions: validatedQuestions };
  }
);
